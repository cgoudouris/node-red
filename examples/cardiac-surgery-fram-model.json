[
    {
        "id": "cardiac-surgery-flow",
        "type": "tab",
        "label": "Cardiac Surgery FRAM Model",
        "disabled": false,
        "info": "Sophisticated FRAM model of cardiac surgery system with interconnected foreground functions\n\nBased on literature analysis from Formula 1 Pit Stop case study and FRAM methodology.\n\nThis model demonstrates:\n- Multiple interconnected foreground functions\n- Output?Input dependencies between functions\n- Functional resonance and variability propagation\n- Complex sociotechnical system modeling\n\nMain Function Chain:\nPreoperative Preparation ? Cardiac Surgery ? Postoperative Care\n\nSupporting Functions:\n- Equipment Sterilization\n- Anesthesia Management\n- Blood Bank Operations\n- OR Team Coordination\n\nEach function's outputs become inputs for subsequent functions, creating\na realistic FRAM model of functional interdependencies."
    },
    {
        "id": "inject-patient-arrival",
        "type": "inject",
        "z": "cardiac-surgery-flow",
        "name": "Patient Arrival",
        "props": [
            {
                "p": "payload.patient",
                "v": "{\"id\": \"P001\", \"name\": \"João Silva\", \"age\": 65, \"condition\": \"Coronary Artery Disease\", \"urgency\": \"elective\", \"arrivalTime\": \"08:00\"}",
                "vt": "json"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload.functionType",
                "v": "trigger",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "patient-arrival",
        "x": 130,
        "y": 100,
        "wires": [["preop-preparation", "equipment-sterilization"]]
    },
    {
        "id": "preop-preparation",
        "type": "function",
        "z": "cardiac-surgery-flow",
        "name": "Preoperative Preparation (FRAM Function 1)",
        "func": "// FRAM Function: Preoperative Preparation\n// Interpretation Profile: Human (Patient Assessment and Care)\n// Function Type: Foreground\n\nconst patient = msg.payload.patient;\nconst timestamp = new Date();\n\n// Simulate preoperative assessment variability\nconst assessmentDuration = Math.random() * 30 + 45; // 45-75 minutes\nconst riskScore = Math.random() * 10; // 0-10 risk assessment\nconst comorbidities = riskScore > 7 ? ['diabetes', 'hypertension'] : ['hypertension'];\n\n// FRAM Aspects Configuration\nconst framAspects = {\n    input: {\n        patient: patient,\n        medicalHistory: `Complete history for ${patient.name}`,\n        diagnosticTests: 'ECG, Blood work, Chest X-ray',\n        consentForms: 'Signed and witnessed'\n    },\n    output: {\n        patientReady: true,\n        riskAssessment: {\n            score: riskScore,\n            category: riskScore > 7 ? 'high' : riskScore > 4 ? 'medium' : 'low',\n            comorbidities: comorbidities\n        },\n        surgicalPlan: {\n            procedure: 'CABG',\n            estimatedDuration: 240 + (riskScore * 30), // Base 4h + risk factor\n            specialRequirements: riskScore > 7 ? ['ICU bed reserved', 'Extra blood units'] : []\n        },\n        timing: {\n            completedAt: timestamp,\n            duration: assessmentDuration\n        }\n    },\n    preconditions: {\n        patientFasting: true,\n        consentObtained: true,\n        teamAvailable: true,\n        operatingRoomScheduled: true\n    },\n    resources: {\n        personnel: ['Surgeon', 'Anesthesiologist', 'Preop Nurse'],\n        equipment: ['Monitoring devices', 'Assessment tools'],\n        information: 'Patient medical records'\n    },\n    time: {\n        plannedDuration: 60,\n        actualDuration: assessmentDuration,\n        variability: Math.abs(60 - assessmentDuration),\n        constraints: 'Surgery schedule must be maintained'\n    },\n    control: {\n        protocols: 'Preoperative checklist protocol',\n        guidelines: 'Cardiac surgery preparation standards',\n        supervision: 'Senior nurse oversight',\n        qualityChecks: 'Double verification of patient identity and procedure'\n    }\n};\n\n// Functional Variability Analysis\nconst variability = {\n    timing: assessmentDuration > 65 ? 'delayed' : 'nominal',\n    riskLevel: riskScore > 7 ? 'high-risk' : 'standard',\n    resourceUtilization: riskScore > 7 ? 'intensive' : 'standard'\n};\n\n// FRAM Resonance Detection\nconst resonanceFactors = [];\nif (assessmentDuration > 70) {\n    resonanceFactors.push('Time pressure on subsequent functions');\n}\nif (riskScore > 8) {\n    resonanceFactors.push('High-risk patient requires additional resources');\n}\nif (comorbidities.length > 1) {\n    resonanceFactors.push('Complex patient may affect surgery duration');\n}\n\nmsg.payload = {\n    functionName: 'Preoperative Preparation',\n    functionType: 'foreground',\n    interpretationProfile: 'Human',\n    framAspects: framAspects,\n    variability: variability,\n    resonanceFactors: resonanceFactors,\n    outputForNextFunction: {\n        patientStatus: 'preop-complete',\n        riskProfile: framAspects.output.riskAssessment,\n        surgicalPlan: framAspects.output.surgicalPlan,\n        timing: framAspects.output.timing\n    },\n    metadata: {\n        completedAt: timestamp,\n        duration: assessmentDuration,\n        nextFunction: 'Cardiac Surgery',\n        dependentFunctions: ['Anesthesia Management', 'Blood Bank Operations']\n    }\n};\n\nnode.status({\n    fill: variability.riskLevel === 'high-risk' ? 'red' : 'green',\n    shape: 'dot',\n    text: `${variability.riskLevel} | ${Math.round(assessmentDuration)}min | Risk: ${riskScore.toFixed(1)}`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [["cardiac-surgery", "anesthesia-management", "blood-bank-ops"]]
    },
    {
        "id": "equipment-sterilization",
        "type": "function",
        "z": "cardiac-surgery-flow",
        "name": "Equipment Sterilization (FRAM Background Function)",
        "func": "// FRAM Background Function: Equipment Sterilization\n// Interpretation Profile: Technological\n// Function Type: Background (Supporting)\n\nconst timestamp = new Date();\nconst sterilizationCycles = Math.floor(Math.random() * 3) + 2; // 2-4 cycles needed\nconst cycleTime = 45; // minutes per cycle\nconst totalTime = sterilizationCycles * cycleTime;\n\n// Simulate equipment readiness variability\nconst equipmentReady = Math.random() > 0.1; // 90% success rate\nconst sterilizationQuality = Math.random() * 100;\n\nconst framAspects = {\n    input: {\n        surgicalInstruments: 'Cardiac surgery instrument set',\n        sterilizationRequest: 'From OR scheduler',\n        qualityStandards: 'Hospital sterilization protocols'\n    },\n    output: {\n        sterileEquipment: equipmentReady,\n        qualityLevel: sterilizationQuality,\n        readyTime: new Date(timestamp.getTime() + totalTime * 60000),\n        certificationCode: `STER-${Date.now()}`\n    },\n    preconditions: {\n        equipmentAvailable: true,\n        sterilizationChamberReady: true,\n        qualifiedTechnician: true\n    },\n    resources: {\n        personnel: ['Sterilization Technician'],\n        equipment: ['Autoclave', 'Sterilization indicators'],\n        consumables: ['Sterilization wraps', 'Chemical indicators']\n    },\n    time: {\n        plannedDuration: totalTime,\n        actualDuration: totalTime + (Math.random() * 10 - 5), // ±5 min variability\n        criticalDeadline: 'Before surgery start time'\n    },\n    control: {\n        protocols: 'Sterilization validation protocol',\n        monitoring: 'Continuous temperature and pressure monitoring',\n        qualityAssurance: 'Biological indicator verification'\n    }\n};\n\nconst variability = {\n    timing: Math.abs(framAspects.time.actualDuration - totalTime) > 3 ? 'delayed' : 'nominal',\n    quality: sterilizationQuality > 95 ? 'excellent' : sterilizationQuality > 90 ? 'acceptable' : 'concerning'\n};\n\nmsg.payload = {\n    functionName: 'Equipment Sterilization',\n    functionType: 'background',\n    interpretationProfile: 'Technological',\n    framAspects: framAspects,\n    variability: variability,\n    outputForNextFunction: {\n        equipmentStatus: equipmentReady ? 'sterile-ready' : 'sterilization-failed',\n        qualityAssurance: sterilizationQuality,\n        readyTime: framAspects.output.readyTime\n    },\n    metadata: {\n        completedAt: timestamp,\n        supportingFunction: true,\n        affectedFunctions: ['Cardiac Surgery']\n    }\n};\n\nnode.status({\n    fill: equipmentReady ? 'green' : 'red',\n    shape: 'ring',\n    text: `${variability.quality} | ${sterilizationCycles} cycles | ${Math.round(framAspects.time.actualDuration)}min`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [["or-team-coordination"]]
    },
    {
        "id": "anesthesia-management",
        "type": "function",
        "z": "cardiac-surgery-flow",
        "name": "Anesthesia Management (FRAM Function 2)",
        "func": "// FRAM Function: Anesthesia Management\n// Interpretation Profile: Human (Clinical Decision Making)\n// Function Type: Foreground\n// Dependencies: Receives input from Preoperative Preparation\n\nconst preopData = msg.payload.outputForNextFunction || {};\nconst riskProfile = preopData.riskProfile || { score: 5, category: 'medium' };\nconst timestamp = new Date();\n\n// Anesthesia plan based on preop risk assessment\nconst anesthesiaComplexity = riskProfile.score > 7 ? 'high' : riskProfile.score > 4 ? 'medium' : 'standard';\nconst inductionTime = riskProfile.score * 5 + 15; // 15-65 minutes based on risk\nconst monitoringLevel = riskProfile.score > 7 ? 'intensive' : 'standard';\n\n// Simulate anesthesia-specific variability\nconst complicationRisk = riskProfile.score / 10 * 0.3; // 0-3% based on risk\nconst complicationOccurred = Math.random() < complicationRisk;\nconst hemodynamicStability = !complicationOccurred && Math.random() > 0.15;\n\nconst framAspects = {\n    input: {\n        patientRiskProfile: riskProfile,\n        preoperativeData: preopData,\n        anesthesiaPlan: `${anesthesiaComplexity} complexity anesthesia`,\n        equipmentStatus: 'Anesthesia machine checked and ready'\n    },\n    output: {\n        anesthesiaReady: hemodynamicStability,\n        monitoringEstablished: true,\n        patientStability: {\n            hemodynamic: hemodynamicStability,\n            respiratory: !complicationOccurred,\n            complications: complicationOccurred ? ['Hypotension'] : []\n        },\n        inductionComplete: true,\n        estimatedMaintenance: {\n            duration: preopData.surgicalPlan?.estimatedDuration || 240,\n            complexity: anesthesiaComplexity\n        }\n    },\n    preconditions: {\n        patientAssessed: true,\n        equipmentReady: true,\n        anesthesiologistAvailable: true,\n        emergencyMedsAvailable: true\n    },\n    resources: {\n        personnel: ['Anesthesiologist', 'Anesthesia Technician'],\n        equipment: ['Anesthesia machine', 'Monitoring equipment', 'Ventilator'],\n        medications: ['Anesthetic agents', 'Emergency medications']\n    },\n    time: {\n        plannedInduction: 30,\n        actualInduction: inductionTime,\n        variability: Math.abs(30 - inductionTime),\n        maintenancePhase: preopData.surgicalPlan?.estimatedDuration || 240\n    },\n    control: {\n        protocols: 'Cardiac anesthesia protocols',\n        monitoring: 'Continuous vital signs monitoring',\n        safetyChecks: 'Pre-induction safety checklist',\n        emergencyProcedures: 'Cardiac emergency protocols'\n    }\n};\n\n// Variability analysis\nconst variability = {\n    timing: inductionTime > 45 ? 'delayed' : 'nominal',\n    stability: hemodynamicStability ? 'stable' : 'unstable',\n    complexity: anesthesiaComplexity,\n    complications: complicationOccurred ? 'present' : 'none'\n};\n\n// Resonance factors affecting other functions\nconst resonanceFactors = [];\nif (inductionTime > 50) {\n    resonanceFactors.push('Delayed induction affects surgery start time');\n}\nif (!hemodynamicStability) {\n    resonanceFactors.push('Hemodynamic instability may complicate surgery');\n}\nif (complicationOccurred) {\n    resonanceFactors.push('Anesthesia complications require surgical modifications');\n}\nif (anesthesiaComplexity === 'high') {\n    resonanceFactors.push('Complex anesthesia may extend surgery duration');\n}\n\nmsg.payload = {\n    functionName: 'Anesthesia Management',\n    functionType: 'foreground',\n    interpretationProfile: 'Human',\n    framAspects: framAspects,\n    variability: variability,\n    resonanceFactors: resonanceFactors,\n    outputForNextFunction: {\n        anesthesiaStatus: hemodynamicStability ? 'stable-ready' : 'unstable-proceed-caution',\n        patientCondition: framAspects.output.patientStability,\n        monitoringLevel: monitoringLevel,\n        inductionTime: inductionTime,\n        complications: framAspects.output.patientStability.complications\n    },\n    metadata: {\n        completedAt: timestamp,\n        receivedFromFunction: 'Preoperative Preparation',\n        dependencyData: preopData,\n        nextFunction: 'Cardiac Surgery',\n        criticalFunction: true\n    }\n};\n\nnode.status({\n    fill: hemodynamicStability ? 'green' : 'yellow',\n    shape: 'dot',\n    text: `${variability.stability} | ${anesthesiaComplexity} | ${Math.round(inductionTime)}min`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [["cardiac-surgery"]]
    },
    {
        "id": "blood-bank-ops",
        "type": "function",
        "z": "cardiac-surgery-flow",
        "name": "Blood Bank Operations (FRAM Background Function)",
        "func": "// FRAM Background Function: Blood Bank Operations\n// Interpretation Profile: Organizational (Resource Management)\n// Function Type: Background (Resource Provision)\n// Dependencies: Receives input from Preoperative Preparation\n\nconst preopData = msg.payload.outputForNextFunction || {};\nconst riskProfile = preopData.riskProfile || { score: 5 };\nconst surgicalPlan = preopData.surgicalPlan || {};\nconst timestamp = new Date();\n\n// Blood requirements based on risk and surgical complexity\nconst baseUnits = 2;\nconst riskMultiplier = riskProfile.score > 7 ? 2 : riskProfile.score > 4 ? 1.5 : 1;\nconst requiredUnits = Math.ceil(baseUnits * riskMultiplier);\n\n// Blood availability simulation\nconst bloodAvailability = Math.random() > 0.05; // 95% availability\nconst crossmatchTime = 15 + (requiredUnits * 5); // Base time + units\nconst bloodType = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-'][Math.floor(Math.random() * 8)];\n\nconst framAspects = {\n    input: {\n        surgicalRequest: surgicalPlan,\n        patientRiskProfile: riskProfile,\n        bloodTypeRequired: bloodType,\n        urgencyLevel: surgicalPlan.specialRequirements?.includes('Extra blood units') ? 'high' : 'routine'\n    },\n    output: {\n        bloodUnitsReady: bloodAvailability ? requiredUnits : Math.floor(requiredUnits * 0.7),\n        crossmatchComplete: true,\n        bloodType: bloodType,\n        expirationWindow: '6 hours post-preparation',\n        reservedUnits: requiredUnits,\n        qualityChecked: true\n    },\n    preconditions: {\n        inventoryAvailable: bloodAvailability,\n        crossmatchLabReady: true,\n        qualifiedTechnician: true,\n        patientSampleReceived: true\n    },\n    resources: {\n        personnel: ['Blood Bank Technician', 'Lab Technologist'],\n        equipment: ['Crossmatch analyzer', 'Blood storage units'],\n        inventory: `Blood units type ${bloodType}`,\n        consumables: ['Test reagents', 'Blood bags']\n    },\n    time: {\n        plannedPreparation: 20,\n        actualPreparation: crossmatchTime,\n        variability: Math.abs(20 - crossmatchTime),\n        availabilityWindow: '6 hours'\n    },\n    control: {\n        protocols: 'Blood bank safety protocols',\n        qualityAssurance: 'Double-check crossmatch results',\n        traceability: 'Full chain of custody documentation',\n        safetyChecks: 'Bacterial contamination screening'\n    }\n};\n\n// Variability assessment\nconst variability = {\n    timing: crossmatchTime > 30 ? 'delayed' : 'nominal',\n    availability: bloodAvailability ? 'adequate' : 'limited',\n    complexity: requiredUnits > 4 ? 'high-demand' : 'standard'\n};\n\n// Resource constraints and resonance\nconst resonanceFactors = [];\nif (!bloodAvailability) {\n    resonanceFactors.push('Limited blood availability may delay surgery');\n}\nif (crossmatchTime > 35) {\n    resonanceFactors.push('Extended crossmatch time affects surgery scheduling');\n}\nif (requiredUnits > 6) {\n    resonanceFactors.push('High blood requirement strains bank resources');\n}\n\nmsg.payload = {\n    functionName: 'Blood Bank Operations',\n    functionType: 'background',\n    interpretationProfile: 'Organizational',\n    framAspects: framAspects,\n    variability: variability,\n    resonanceFactors: resonanceFactors,\n    outputForNextFunction: {\n        bloodSupplyStatus: bloodAvailability ? 'adequate' : 'limited',\n        unitsAvailable: framAspects.output.bloodUnitsReady,\n        bloodType: bloodType,\n        readinessTime: crossmatchTime,\n        qualityAssured: true\n    },\n    metadata: {\n        completedAt: timestamp,\n        receivedFromFunction: 'Preoperative Preparation',\n        supportingFunction: true,\n        affectedFunctions: ['Cardiac Surgery'],\n        resourceConstraints: !bloodAvailability\n    }\n};\n\nnode.status({\n    fill: bloodAvailability ? 'green' : 'orange',\n    shape: 'ring',\n    text: `${variability.availability} | ${requiredUnits} units | ${crossmatchTime}min`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 100,
        "wires": [["or-team-coordination"]]
    },\n    {\n        "id": "or-team-coordination",\n        "type": "function",\n        "z": "cardiac-surgery-flow",\n        "name": "OR Team Coordination (FRAM Background Function)",\n        "func": "// FRAM Background Function: OR Team Coordination\n// Interpretation Profile: Organizational (Team Management)\n// Function Type: Background (Coordination and Communication)\n\nconst timestamp = new Date();\n\n// Simulate team coordination dynamics\nconst teamSize = 8 + Math.floor(Math.random() * 4); // 8-12 team members\nconst coordinationEfficiency = Math.random() * 100;\nconst communicationDelay = Math.random() * 5; // 0-5 minutes\nconst teamReadiness = coordinationEfficiency > 80;\n\nconst framAspects = {\n    input: {\n        equipmentStatus: 'Equipment ready from sterilization',\n        bloodBankStatus: 'Blood products prepared',\n        teamAssignments: 'Surgeon, anesthesiologist, nurses, perfusionist',\n        scheduleRequirements: 'Surgery scheduled for 10:00 AM'\n    },\n    output: {\n        teamAssembled: teamReadiness,\n        communicationEstablished: true,\n        rolesAssigned: true,\n        briefingCompleted: coordinationEfficiency > 70,\n        safetyChecklistDone: true,\n        teamSynergy: coordinationEfficiency\n    },\n    preconditions: {\n        allStaffAvailable: teamReadiness,\n        operatingRoomReady: true,\n        equipmentFunctional: true,\n        safetyProtocolsReviewed: true\n    },\n    resources: {\n        personnel: [`Team of ${teamSize} members`],\n        communication: ['Intercom system', 'Visual displays'],\n        documentation: ['Surgical checklist', 'Team assignments'],\n        coordination: 'OR coordinator supervision'\n    },\n    time: {\n        plannedBriefing: 15,\n        actualBriefing: 15 + communicationDelay,\n        variability: communicationDelay,\n        setupTime: 'Parallel with other preparations'\n    },\n    control: {\n        protocols: 'WHO surgical safety checklist',\n        leadership: 'Surgeon as team leader',\n        communication: 'Closed-loop communication protocols',\n        emergencyProcedures: 'Code blue protocols'\n    }\n};\n\nconst variability = {\n    timing: communicationDelay > 3 ? 'delayed' : 'nominal',\n    efficiency: coordinationEfficiency > 85 ? 'excellent' : coordinationEfficiency > 70 ? 'good' : 'concerning',\n    teamSize: teamSize > 10 ? 'large' : 'standard'\n};\n\nconst resonanceFactors = [];\nif (coordinationEfficiency < 70) {\n    resonanceFactors.push('Poor team coordination may affect surgical performance');\n}\nif (communicationDelay > 4) {\n    resonanceFactors.push('Communication delays impact surgery start time');\n}\nif (teamSize > 11) {\n    resonanceFactors.push('Large team size may complicate coordination');\n}\n\nmsg.payload = {\n    functionName: 'OR Team Coordination',\n    functionType: 'background',\n    interpretationProfile: 'Organizational',\n    framAspects: framAspects,\n    variability: variability,\n    resonanceFactors: resonanceFactors,\n    outputForNextFunction: {\n        teamStatus: teamReadiness ? 'ready-coordinated' : 'coordination-issues',\n        communicationQuality: coordinationEfficiency,\n        teamSynergy: framAspects.output.teamSynergy,\n        safetyChecksComplete: true\n    },\n    metadata: {\n        completedAt: timestamp,\n        supportingFunction: true,\n        affectedFunctions: ['Cardiac Surgery'],\n        teamSize: teamSize\n    }\n};\n\nnode.status({\n    fill: teamReadiness ? 'green' : 'yellow',\n    shape: 'ring',\n    text: `${variability.efficiency} | ${teamSize} members | ${Math.round(coordinationEfficiency)}%`\n});\n\nreturn msg;",\n        "outputs": 1,\n        "noerr": 0,\n        "initialize": "",\n        "finalize": "",\n        "libs": [],\n        "x": 700,\n        "y": 200,\n        "wires": [["cardiac-surgery"]]\n    },\n    {\n        "id": "cardiac-surgery",\n        "type": "fram-node",\n        "z": "cardiac-surgery-flow",\n        "name": "Cardiac Surgery (FRAM Function 3 - Core)",\n        "functionName": "Cardiac Surgery Execution",\n        "interpretationProfile": "Human",\n        "hierarchicalGroup": "Core Surgical Process",\n        "framAspects": {\n            "input": "Patient prepped, anesthesia stable, equipment sterile, team coordinated",\n            "output": "Surgical repair completed, patient stabilized",\n            "preconditions": "All preparatory functions completed successfully",\n            "resources": "Surgical team, equipment, blood products, OR environment",\n            "time": "Planned 4-6 hours depending on complexity",\n            "control": "Surgical protocols, safety guidelines, quality standards"\n        },\n        "metadata": {\n            "ontology": "Cardiac Surgery Procedures",\n            "criticality": "High",\n            "dependencies": "Preop, Anesthesia, Equipment, Blood Bank, Team Coordination"\n        },\n        "x": 1000,\n        "y": 250,\n        "wires": [["postop-care", "surgery-outcome"]]\n    },\n    {\n        "id": "postop-care",\n        "type": "function",\n        "z": "cardiac-surgery-flow",\n        "name": "Postoperative Care (FRAM Function 4)",\n        "func": "// FRAM Function: Postoperative Care\n// Interpretation Profile: Human (Critical Care)\n// Function Type: Foreground\n// Dependencies: Receives outputs from Cardiac Surgery\n\nconst surgeryData = msg.payload;\nconst timestamp = new Date();\n\n// Simulate postoperative variables based on surgery outcome\nconst surgerySuccess = !surgeryData.complications || surgeryData.complications.length === 0;\nconst recoveryComplexity = surgerySuccess ? 'standard' : 'complex';\nconst icuDuration = surgerySuccess ? 24 + Math.random() * 24 : 48 + Math.random() * 72; // hours\nconst complicationRisk = surgerySuccess ? 0.1 : 0.3;\n\n// Post-operative monitoring requirements\nconst monitoringIntensity = recoveryComplexity === 'complex' ? 'intensive' : 'standard';\nconst postopComplications = Math.random() < complicationRisk;\n\nconst framAspects = {\n    input: {\n        surgicalOutcome: surgeryData,\n        patientCondition: surgeryData.patientStatus || 'post-surgery',\n        anesthesiaStatus: 'Emerging from anesthesia',\n        vitalSigns: 'Continuous monitoring established'\n    },\n    output: {\n        recoveryProgress: {\n            phase: 'immediate-postop',\n            stability: !postopComplications ? 'stable' : 'unstable',\n            complications: postopComplications ? ['Bleeding', 'Arrhythmia'] : [],\n            expectedICUDuration: icuDuration\n        },\n        monitoringLevel: monitoringIntensity,\n        dischargeProjection: {\n            estimatedDays: surgerySuccess ? 5 + Math.random() * 3 : 7 + Math.random() * 5,\n            readinessFactors: ['Wound healing', 'Mobility', 'Pain management']\n        },\n        familyNotification: 'Surgery completed, patient in recovery'\n    },\n    preconditions: {\n        icuBedAvailable: true,\n        recoveryTeamReady: true,\n        monitoringEquipmentReady: true,\n        postopOrdersReceived: true\n    },\n    resources: {\n        personnel: ['ICU Nurses', 'Intensivist', 'Residents'],\n        equipment: ['Cardiac monitors', 'Ventilator', 'Infusion pumps'],\n        medications: ['Pain management', 'Cardiac medications', 'Antibiotics'],\n        environment: 'ICU with specialized cardiac monitoring'\n    },\n    time: {\n        immediatePhase: 24, // First 24 hours critical\n        icuStay: icuDuration,\n        totalRecovery: icuDuration + (recoveryComplexity === 'complex' ? 72 : 48),\n        variability: Math.abs(icuDuration - (surgerySuccess ? 36 : 60))\n    },\n    control: {\n        protocols: 'Post-cardiac surgery care protocols',\n        monitoring: 'Continuous cardiac and hemodynamic monitoring',\n        qualityMetrics: 'Recovery milestones tracking',\n        safetyMeasures: 'Infection prevention, fall prevention'\n    }\n};\n\n// Variability analysis\nconst variability = {\n    timing: icuDuration > (surgerySuccess ? 48 : 72) ? 'extended' : 'nominal',\n    complexity: recoveryComplexity,\n    stability: !postopComplications ? 'stable' : 'unstable',\n    resource_intensity: monitoringIntensity\n};\n\n// Resonance factors\nconst resonanceFactors = [];\nif (postopComplications) {\n    resonanceFactors.push('Postoperative complications require additional resources');\n}\nif (icuDuration > 72) {\n    resonanceFactors.push('Extended ICU stay affects bed availability');\n}\nif (recoveryComplexity === 'complex') {\n    resonanceFactors.push('Complex recovery impacts discharge planning');\n}\n\nmsg.payload = {\n    functionName: 'Postoperative Care',\n    functionType: 'foreground',\n    interpretationProfile: 'Human',\n    framAspects: framAspects,\n    variability: variability,\n    resonanceFactors: resonanceFactors,\n    outputForNextFunction: {\n        recoveryStatus: framAspects.output.recoveryProgress,\n        patientStability: !postopComplications ? 'stable' : 'requires-intervention',\n        resourceNeeds: monitoringIntensity,\n        expectedOutcome: framAspects.output.dischargeProjection\n    },\n    metadata: {\n        completedAt: timestamp,\n        receivedFromFunction: 'Cardiac Surgery',\n        finalFunction: true,\n        criticalPhase: true,\n        qualityIndicator: !postopComplications\n    },\n    systemOutcome: {\n        overallSuccess: surgerySuccess && !postopComplications,\n        patientSafety: 'Maintained throughout process',\n        functionalChainCompleted: true,\n        systemResilience: 'Demonstrated through function interdependencies'\n    }\n};\n\nnode.status({\n    fill: !postopComplications ? 'green' : 'yellow',\n    shape: 'dot',\n    text: `${variability.complexity} | ${variability.stability} | ICU: ${Math.round(icuDuration)}h`\n});\n\nreturn msg;",\n        "outputs": 1,\n        "noerr": 0,\n        "initialize": "",\n        "finalize": "",\n        "libs": [],\n        "x": 1300,\n        "y": 300,\n        "wires": [["system-outcome"]]\n    },\n    {\n        "id": "surgery-outcome",\n        "type": "debug",\n        "z": "cardiac-surgery-flow",\n        "name": "Surgery Execution Results",\n        "active": true,\n        "tosidebar": true,\n        "console": false,\n        "tostatus": false,\n        "complete": "payload",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 1300,\n        "y": 200,\n        "wires": []\n    },\n    {\n        "id": "system-outcome",\n        "type": "function",\n        "z": "cardiac-surgery-flow",\n        "name": "FRAM System Analysis",\n        "func": "// FRAM System-Level Analysis\n// Analyzes functional resonance across the entire cardiac surgery system\n\nconst postopData = msg.payload;\nconst timestamp = new Date();\n\n// Collect system-wide performance metrics\nconst systemMetrics = {\n    functionalChainComplete: true,\n    overallSystemSuccess: postopData.systemOutcome?.overallSuccess || false,\n    functionalResonanceDetected: postopData.resonanceFactors?.length > 0,\n    systemResilience: 'High - Multiple interdependent functions completed successfully'\n};\n\n// FRAM System Analysis\nconst systemAnalysis = {\n    functionalModel: {\n        foregroundFunctions: [\n            'Preoperative Preparation',\n            'Anesthesia Management', \n            'Cardiac Surgery Execution',\n            'Postoperative Care'\n        ],\n        backgroundFunctions: [\n            'Equipment Sterilization',\n            'Blood Bank Operations',\n            'OR Team Coordination'\n        ],\n        interconnections: [\n            'Preop ? Anesthesia ? Surgery',\n            'Preop ? Blood Bank ? Surgery',\n            'Equipment ? OR Team ? Surgery',\n            'Surgery ? Postop Care'\n        ]\n    },\n    resonanceAnalysis: {\n        propagationPaths: [\n            'Risk assessment variability affects anesthesia complexity',\n            'Anesthesia stability influences surgical approach',\n            'Equipment readiness impacts surgical timing',\n            'Team coordination affects surgical efficiency',\n            'Surgery outcome determines postop complexity'\n        ],\n        systemVariability: 'Managed through function interdependencies',\n        adaptabilityDemonstrated: 'Functions adapted to variability from upstream functions'\n    },\n    performanceIndicators: {\n        systemThroughput: 'One complete cardiac surgery case',\n        qualityMetrics: postopData.systemOutcome?.patientSafety,\n        resourceUtilization: 'Optimized across all functions',\n        timelineAdherence: 'Functions completed within acceptable variability'\n    },\n    literatureAlignment: {\n        framMethodology: 'Six aspects modeled for each function',\n        functionalResonance: 'Demonstrated through inter-function variability propagation',\n        sociotechnicalComplexity: 'Human, technological, and organizational aspects integrated',\n        realWorldApplicability: 'Based on F1 Pit Stop and Deepwater Horizon case study patterns'\n    }\n};\n\nmsg.payload = {\n    framSystemAnalysis: systemAnalysis,\n    systemMetrics: systemMetrics,\n    postoperativeResults: postopData,\n    modelValidation: {\n        literatureBased: true,\n        interconnectedFunctions: 4, // foreground functions\n        supportingFunctions: 3, // background functions\n        demonstratesComplexity: true,\n        framPrinciplesApplied: true\n    },\n    timestamp: timestamp\n};\n\nnode.status({\n    fill: systemMetrics.overallSystemSuccess ? 'green' : 'yellow',\n    shape: 'dot',\n    text: `System ${systemMetrics.overallSystemSuccess ? 'Success' : 'Completed'} | ${systemAnalysis.functionalModel.foregroundFunctions.length} Interconnected Functions`\n});\n\nreturn msg;",\n        "outputs": 1,\n        "noerr": 0,\n        "initialize": "",\n        "finalize": "",\n        "libs": [],\n        "x": 1600,\n        "y": 300,\n        "wires": [["final-output"]]\n    },\n    {\n        "id": "final-output",\n        "type": "debug",\n        "z": "cardiac-surgery-flow",\n        "name": "Complete FRAM System Results",\n        "active": true,\n        "tosidebar": true,\n        "console": false,\n        "tostatus": false,\n        "complete": "payload",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 1600,\n        "y": 400,\n        "wires": []\n    },\n    {\n        "id": "comment-fram-model",\n        "type": "comment",\n        "z": "cardiac-surgery-flow",\n        "name": "Sophisticated FRAM Model: Cardiac Surgery System",\n        "info": "## Advanced FRAM Model Implementation\\n\\n### Based on Literature Research\\n\\nThis model implements insights from:\\n- **Formula 1 Pit Stop Case Study**: Multiple interconnected functions with sequential dependencies\\n- **FRAM Methodology**: Six aspects (Input, Output, Preconditions, Resources, Time, Control)\\n- **Functional Resonance**: Variability propagation between functions\\n\\n### System Architecture\\n\\n**Foreground Functions (Primary Chain):**\\n1. **Preoperative Preparation** ? Risk assessment and surgical planning\\n2. **Anesthesia Management** ? Patient stabilization for surgery\\n3. **Cardiac Surgery** ? Core surgical intervention\\n4. **Postoperative Care** ? Recovery and monitoring\\n\\n**Background Functions (Supporting):**\\n- **Equipment Sterilization** ? Technological support\\n- **Blood Bank Operations** ? Resource provision\\n- **OR Team Coordination** ? Organizational coordination\\n\\n### Key FRAM Features Implemented\\n\\n- **Function Interdependencies**: Outputs from one function become inputs for others\\n- **Variability Propagation**: Risk factors flow through the system\\n- **Functional Resonance**: How variations in one function affect others\\n- **Multiple Interpretation Profiles**: Human, Technological, Organizational\\n- **Realistic Complexity**: Based on real-world healthcare systems\\n\\n### Literature Alignment\\n\\nThis model demonstrates the FRAM principle that \\\"functions are interdependent and that the variability of one function can affect the performance of others\\\" (Hollnagel, 2012).\\n\\nSimilar to the F1 Pit Stop case, this shows how:\\n- Sequential functions depend on previous outputs\\n- Background functions support foreground operations\\n- Variability in early functions propagates through the system\\n- System resilience emerges from function interactions\",\n        \"x\": 400,\n        \"y\": 40,\n        \"wires\": []\n    }\n]